
buildscript {
    ext {
        grgitVersion = '2.3.0'
        sonarqubeVersion = '4.0.0.2929'
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:grgit:${grgitVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'


group = 'me.bombies.lavalink.client'
version = "${versionFromTag()}"
description = 'JDA based client for the Lavalink-Server written specifically for Robertify.'


sourceCompatibility = 19
targetCompatibility = 19


repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}


ext {
    //@formatter:off
    gradleVersion               = '4.9'
    //@formatter:on
}


dependencies {
    compile group: 'com.github.walkyst', name: 'lavaplayer-fork', version: '1.4.0'
    compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    compile group: 'org.json', name: 'json', version: '20230227'
    compileOnly group: 'net.dv8tion', name: 'JDA', version: '5.0.0-beta.6'
    testCompile group: 'net.dv8tion', name: 'JDA', version: '5.0.0-beta.6'
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '3.1.3'
    compileOnly group: 'io.prometheus', name: 'simpleclient', version: '0.4.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.2.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.2.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.2.0'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testCompile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
}


compileJava {
    dependsOn(clean)
    options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


wrapper {
    gradleVersion = project.ext.gradleVersion
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}


build {
    doLast {
        println 'Version: ' + version
    }
}


test {
    useJUnitPlatform()

    systemProperty("TEST_TOKEN", System.getProperty("TEST_TOKEN"))
    systemProperty("TEST_VOICE_CHANNEL", System.getProperty("TEST_VOICE_CHANNEL"))

    jacoco {
        includes['lavalink.client.*']
    }
}

sonarqube {
    properties {
        property "sonar.inclusions", "src/main/java/**/*"
    }
}


jar.mustRunAfter clean
publishToMavenLocal.dependsOn jar
// called by jitpack
task install {
    dependsOn test
    dependsOn publishToMavenLocal
    doLast {
        println 'Version: ' + version
    }
}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            groupId project.group
            artifactId project.name
            version project.version

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/bombies/Robertify-Lavalink-Client'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://choosealicense.com/licenses/mit/'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/bombies/Robertify-Lavalink-Client'
                }
            }
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit == grgit.head()
    }

    def clean = grgit.status().clean //uncommitted changes? -> should be SNAPSHOT

    if (headTag && clean) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}
